function getShowImageOptions(){
    const data =  window.localStorage.getItem("CT_ENABLE_FLOAT_IMAGE_MENU");
    return data;
}

window.removeSaveImageIcons = () => {
    const saveImageBtns = document.querySelectorAll('.imageSave-button');
    const saveImageOptions = document.querySelectorAll('.ct-option-container');
    if(saveImageBtns.length > 0){
        for(const btns of saveImageBtns){
            btns?.remove();
        }
    }

    if(saveImageOptions.length > 0){
        for(const btns of saveImageOptions){
            btns?.remove();
        }
    }
}



let currentSrc            = ""
let isProcessing          = false
const iconSvg             = document.createElement("button")
const msgSpan             = document.createElement('span')
const copySpan            = document.createElement('span')
const dwldSpan            = document.createElement('span')
const textExtractSpan     = document.createElement('span')
const editSpan            = document.createElement('span')
const optionContainer     = document.createElement("div")
const divElm              = document.createElement("div")
divElm.id = "ct-image-operations"
divElm.style.display = "none"
divElm.style.justifyContent = "center"
divElm.style.alignItems = "center"
iconSvg.type              = "button"
iconSvg.classList.add("imageSave-button")
iconSvg.innerHTML=`
    <div class="ct-tooltip" data-tooltip="Save Image" title="Save Image">
    <svg width="48" height="36" viewBox="0 0 48 36" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
    <rect x="0.439024" y="0.439024" width="46.5366" height="35.122" rx="3.95122" stroke="black" stroke-width="0.878049"/>
    <rect x="1.31695" y="1.31695" width="44.7805" height="33.366" rx="3.07317" stroke="#347AE2" stroke-width="0.878049"/>
    <g clip-path="url(#clip0_6724_7123)">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M33.2979 18.3477C33.8717 18.7214 34.34 19.0264 34.8913 19.4187C35.7508 20.0252 36.3048 20.6805 36.5499 21.2651C36.6899 21.6182 36.7601 21.9953 36.7564 22.3753C36.7563 22.8425 36.6621 23.305 36.4794 23.7348C36.3546 24.0556 36.1667 24.348 35.9271 24.5946C35.6874 24.8411 35.4008 25.0369 35.0843 25.1701C34.8301 25.2679 34.5575 25.3084 34.2859 25.2886C34.0143 25.2688 33.7504 25.1892 33.513 25.0556C33.2643 24.9246 33.046 24.7424 32.8724 24.5209C32.6988 24.2994 32.5738 24.0436 32.5057 23.7702C32.41 23.3861 32.4956 22.3163 33.0261 22.3601C33.3294 22.385 33.4088 22.6889 33.4686 22.9184C33.4857 22.9836 33.5011 23.0428 33.5197 23.0879C33.7228 23.5849 34.1811 23.632 34.4481 23.4501C34.8476 23.1789 34.6982 22.6549 34.5958 22.4646C34.3708 22.0468 33.9494 21.7081 33.2041 21.2853C32.8686 21.1029 32.5188 20.9485 32.1582 20.8237L32.1313 20.8136C31.9147 20.7344 31.6864 20.6586 31.4598 20.5879L31.1828 20.4986C31.177 20.8746 31.1967 21.2506 31.2415 21.6239C31.3801 22.7104 31.809 23.6476 32.0537 24.1825C32.1232 24.3344 32.1779 24.4538 32.2068 24.535C32.5896 25.6098 32.6551 26.2365 32.5896 26.9104C32.5157 27.6954 32.1279 28.9774 30.9393 29.53C30.5376 29.7344 30.095 29.845 29.6447 29.8534C29.1943 29.8619 28.7479 29.768 28.3389 29.5789C27.4575 29.1577 27.204 28.6692 26.9538 27.9953C26.8295 27.6692 26.7758 27.3202 26.7963 26.9716C26.8169 26.623 26.9112 26.2828 27.073 25.9737C27.3291 25.5241 27.7513 25.1937 28.2482 25.0539C28.8576 24.8837 29.2907 25.1903 29.3059 25.4969C29.3159 25.7075 29.0406 26.0175 28.9416 26.1203C28.7048 26.3679 28.5084 27.2439 29.0406 27.5809C29.5459 27.8976 30.5079 27.5472 30.6069 26.6947C30.7177 25.748 30.3702 23.819 28.9533 21.8345C28.186 20.7242 27.7679 19.4086 27.753 18.0575V18.0002V17.9429C27.7679 16.5918 28.186 15.2762 28.9533 14.1659C30.3702 12.1814 30.7177 10.2525 30.6069 9.3057C30.5079 8.45326 29.5442 8.10286 29.0406 8.41957C28.5084 8.75313 28.6998 9.63252 28.9416 9.88017C29.0406 9.98293 29.3159 10.2929 29.3059 10.5035C29.2907 10.8101 28.8576 11.115 28.2482 10.9466C27.7513 10.8068 27.3291 10.4764 27.073 10.0267C26.9112 9.7176 26.8169 9.37741 26.7963 9.02883C26.7758 8.68025 26.8295 8.33127 26.9538 8.00515C27.204 7.33297 27.4558 6.84273 28.3389 6.42157C28.7479 6.23241 29.1943 6.13855 29.6447 6.14701C30.095 6.15547 30.5376 6.26603 30.9393 6.47042C32.1279 7.02299 32.5157 8.30501 32.5896 9.09006C32.6551 9.76056 32.5896 10.3889 32.2068 11.4654C32.1777 11.5504 32.1199 11.6773 32.0461 11.8395C31.8008 12.3786 31.3783 13.3069 31.2415 14.3765C31.1967 14.7499 31.177 15.1259 31.1828 15.5019L31.4598 15.4126C31.6797 15.3418 31.908 15.266 32.1313 15.1868L32.1582 15.1767C32.5188 15.0519 32.8686 14.8975 33.2041 14.7151C33.9494 14.2957 34.3708 13.957 34.5958 13.5359C34.6982 13.3455 34.8476 12.8216 34.4481 12.5504C34.1811 12.3684 33.7228 12.4173 33.5197 12.9126C33.5011 12.9576 33.4857 13.0168 33.4686 13.082C33.4088 13.3115 33.3294 13.6154 33.0261 13.6403C32.4956 13.6841 32.41 12.6144 32.5057 12.2303C32.5738 11.9569 32.6988 11.701 32.8724 11.4795C33.046 11.258 33.2643 11.0758 33.513 10.9449C33.7504 10.8112 34.0143 10.7317 34.2859 10.7119C34.5575 10.6921 34.8301 10.7325 35.0843 10.8303C35.4008 10.9636 35.6874 11.1593 35.9271 11.4059C36.1667 11.6524 36.3546 11.9448 36.4794 12.2656C36.6621 12.6955 36.7563 13.1579 36.7564 13.6252C36.76 14.0052 36.6898 14.3822 36.5499 14.7354C36.3048 15.3267 35.7508 15.9854 34.8913 16.5885C34.261 17.0295 33.7405 17.3697 33.0446 17.8246C32.9564 17.8823 32.8654 17.9418 32.7709 18.0036C32.9584 18.1265 33.1325 18.2399 33.2979 18.3477ZM26.7602 21.7521C26.9331 21.8397 27.0288 21.9172 27.0506 21.9913C27.0603 22.1293 27.0204 22.2662 26.9381 22.3771C25.13 25.5695 21.4367 27.2946 17.7433 26.6662C14.2262 26.0716 11.3403 23.1672 10.7292 19.6058C10.6701 19.2626 10.6322 18.9071 10.5954 18.5613L10.5899 18.5091L10.5899 18.5091C10.5731 18.3407 10.5563 18.1722 10.5361 18.0037C10.5465 16.0775 11.1851 14.2077 12.3544 12.6801C13.5237 11.1525 15.1593 10.0512 17.0112 9.54442C18.8631 9.03766 20.8295 9.15338 22.6097 9.87389C24.3899 10.5944 25.886 11.8801 26.8693 13.5343C27.017 13.7702 27.0691 13.9403 27.0372 14.0397C27.0053 14.1391 26.876 14.2385 26.6427 14.3447C25.36 14.9242 24.1362 14.8214 22.9006 14.033C20.9616 12.7948 18.2301 12.8857 16.4069 14.2469C14.8372 15.4211 14.1741 16.9811 14.4931 18.7585C14.8406 20.7009 16.1048 22.0334 18.1479 22.6146C19.914 23.115 21.5374 22.8943 22.9694 21.9559C24.2 21.149 25.4406 21.0782 26.7602 21.7521ZM20.159 19.5466H20.6341C20.8095 19.5466 20.9778 19.6165 21.1018 19.741C21.2259 19.8655 21.2956 20.0343 21.2956 20.2103C21.2956 20.3864 21.2259 20.5552 21.1018 20.6797C20.9778 20.8042 20.8095 20.8741 20.6341 20.8741H20.159C19.9836 20.8741 19.8153 20.8042 19.6913 20.6797C19.5672 20.5552 19.4975 20.3864 19.4975 20.2103C19.4975 20.0343 19.5672 19.8655 19.6913 19.741C19.8153 19.6165 19.9836 19.5466 20.159 19.5466ZM20.6341 15.1293H20.159C19.9836 15.1293 19.8153 15.1993 19.6913 15.3237C19.5672 15.4482 19.4975 15.6171 19.4975 15.7931C19.4975 15.9691 19.5672 16.138 19.6913 16.2624C19.8153 16.3869 19.9836 16.4568 20.159 16.4568H20.6341C20.8095 16.4568 20.9778 16.3869 21.1018 16.2624C21.2259 16.138 21.2956 15.9691 21.2956 15.7931C21.2956 15.6171 21.2259 15.4482 21.1018 15.3237C20.9778 15.1993 20.8095 15.1293 20.6341 15.1293Z" fill="#105FD3"/>
    </g>
    <defs>
    <clipPath id="clip0_6724_7123">
    <rect width="26.3415" height="23.7075" fill="white" transform="translate(10.5361 6.14648)"/>
    </clipPath>
    </defs>
    </svg>
    </div>
`
iconSvg.style.display   = "none";
iconSvg.style.position  = "absolute"
iconSvg.style.zIndex    = 9999999
iconSvg.addEventListener("pointerenter", (e) => {
    iconSvg.style.display         = "block"
    optionContainer.style.display = "flex"
    divElm.style.display          = "flex"
})
iconSvg.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    chrome.storage.sync.remove("imageData")
    chrome.storage.sync.set({'imageData': {
        imageSrc: currentSrc
    }})
    window.panelToggle("?image", true)
})
iconSvg.addEventListener("pointerleave", (e) => {
    iconSvg.style.display           = "none"
    optionContainer.style.display   = "none"
    divElm.style.display            = "none"
})

optionContainer.classList.add("ct-option-container")
optionContainer.style.display   = "none";
optionContainer.style.position  = "absolute"
optionContainer.style.zIndex    = 9999999

optionContainer.addEventListener("pointerenter", (e) => {
    optionContainer.style.display = "flex"
    iconSvg.style.display         = "block"
    divElm.style.display          = "flex"
})
optionContainer.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    chrome.storage.sync.remove("imageData")
    chrome.storage.sync.set({'imageData': {
        imageSrc: currentSrc
    }})
    window.panelToggle("?image", true)
})
optionContainer.addEventListener("pointerleave", (e) => {
    optionContainer.style.display = "none"
    iconSvg.style.display = "none"
    divElm.style.display = "none"
})

msgSpan.innerHTML=`
<div class="ct-tooltip ct-mr-5" title="Open Highlights" data-tooltip="Open Highlights">
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
<rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
<rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
<g clip-path="url(#clip0_6722_6991)">
<path d="M13.9997 17.6668V14.0002M13.9997 10.3335H14.0088M23.1663 14.0002C23.1663 19.0628 19.0623 23.1668 13.9997 23.1668C8.93706 23.1668 4.83301 19.0628 4.83301 14.0002C4.83301 8.93755 8.93706 4.8335 13.9997 4.8335C19.0623 4.8335 23.1663 8.93755 23.1663 14.0002Z" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_6722_6991">
<rect width="22" height="22" fill="white" transform="translate(3 3)"/>
</clipPath>
</defs>
</svg>
</div>
`

copySpan.innerHTML=`
    <div class="ct-tooltip ct-mr-5" title="Copy Image Link" data-tooltip="Copy Image Link">
    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
    <path d="M16.3436 15.1168C15.3882 16.0722 13.8391 16.0722 12.8836 15.1168C11.9281 14.1612 11.9281 12.6122 12.8836 11.6567L15.0462 9.49412C15.9581 8.58214 17.4109 8.54063 18.3721 9.3696M18.0737 6.4666C19.0292 5.51113 20.5782 5.51113 21.5338 6.4666C22.4892 7.42207 22.4892 8.97119 21.5338 9.92666L19.3712 12.0892C18.4593 13.0012 17.0065 13.0427 16.0452 12.2137" stroke="#062046" stroke-width="1.5" stroke-linejoin="round"/>
    <path d="M13.0833 5.75H8.75013C7.09329 5.75 5.75014 7.09313 5.75013 8.74997L5.75003 19.25C5.75001 20.9068 7.09316 22.25 8.75003 22.25H19.25C20.9069 22.25 22.25 20.9069 22.25 19.25V14.9167" stroke="#062046" stroke-width="1.7" stroke-linejoin="round"/>
    </svg>
    </div>
`

dwldSpan.innerHTML=`
    <div class="ct-tooltip ct-mr-5" title="Download Image" data-tooltip="Download Image">
    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
    <g clip-path="url(#clip0_6723_7001)">
    <path d="M10.333 14.0002L13.9997 17.6668M13.9997 17.6668L17.6663 14.0002M13.9997 17.6668V10.3335M23.1663 14.0002C23.1663 19.0628 19.0623 23.1668 13.9997 23.1668C8.93706 23.1668 4.83301 19.0628 4.83301 14.0002C4.83301 8.93755 8.93706 4.8335 13.9997 4.8335C19.0623 4.8335 23.1663 8.93755 23.1663 14.0002Z" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
    </g>
    <defs>
    <clipPath id="clip0_6723_7001">
    <rect width="22" height="22" fill="white" transform="translate(3 3)"/>
    </clipPath>
    </defs>
    </svg>
    </div>
`

textExtractSpan.innerHTML=`
    <div class="ct-tooltip ct-mr-5" title="Copy and extract image text" data-tooltip="Copy and extract image text">
    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
    <path d="M18.5829 11.2502C18.5807 8.5395 18.5397 7.13544 17.7507 6.17406C17.5983 5.9884 17.4281 5.81816 17.2425 5.66579C16.2283 4.8335 14.7215 4.8335 11.708 4.8335C8.69448 4.8335 7.18772 4.8335 6.17357 5.66579C5.98791 5.81815 5.81767 5.9884 5.6653 6.17406C4.83301 7.18821 4.83301 8.69497 4.83301 11.7085C4.83301 14.722 4.83301 16.2288 5.6653 17.243C5.81766 17.4286 5.98791 17.5988 6.17357 17.7512C7.13495 18.5402 8.53901 18.5812 11.2497 18.5834" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M15.8335 10.5626C15.4538 10.5626 15.146 10.8704 15.146 11.2501C15.146 11.6298 15.4538 11.9376 15.8335 11.9376V10.5626ZM18.5835 11.9376C18.9631 11.9376 19.271 11.6298 19.271 11.2501C19.271 10.8704 18.9631 10.5626 18.5835 10.5626V11.9376ZM11.9376 15.8334C11.9376 15.4537 11.6298 15.1459 11.2501 15.1459C10.8704 15.1459 10.5626 15.4537 10.5626 15.8334H11.9376ZM10.5626 18.5834C10.5626 18.9631 10.8704 19.2709 11.2501 19.2709C11.6298 19.2709 11.9376 18.9631 11.9376 18.5834H10.5626ZM13.595 11.9317C13.9714 11.8824 14.2365 11.5372 14.1872 11.1607C14.1378 10.7842 13.7926 10.519 13.4161 10.5684L13.595 11.9317ZM10.5761 12.948C10.5013 13.3203 10.7425 13.6826 11.1147 13.7574C11.487 13.8322 11.8494 13.5911 11.9242 13.2188L10.5761 12.948ZM22.4928 13.2188C22.5676 13.5911 22.9299 13.8322 23.3022 13.7574C23.6744 13.6826 23.9156 13.3203 23.8408 12.948L22.4928 13.2188ZM21.0008 10.5684C20.6243 10.519 20.2791 10.7842 20.2297 11.1607C20.1804 11.5372 20.4455 11.8824 20.822 11.9317L21.0008 10.5684ZM20.822 22.4851C20.4455 22.5344 20.1804 22.8796 20.2297 23.2561C20.2791 23.6326 20.6243 23.8978 21.0008 23.8484L20.822 22.4851ZM23.8408 21.4688C23.9156 21.0965 23.6744 20.7342 23.3022 20.6594C22.9299 20.5846 22.5676 20.8258 22.4928 21.198L23.8408 21.4688ZM11.9242 21.198C11.8494 20.8258 11.487 20.5846 11.1147 20.6594C10.7425 20.7342 10.5013 21.0965 10.5761 21.4688L11.9242 21.198ZM13.4161 23.8484C13.7926 23.8978 14.1378 23.6326 14.1872 23.2561C14.2365 22.8796 13.9714 22.5344 13.595 22.4851L13.4161 23.8484ZM15.8335 22.4792C15.4538 22.4792 15.146 22.7871 15.146 23.1667C15.146 23.5464 15.4538 23.8542 15.8335 23.8542V22.4792ZM18.5835 23.8542C18.9631 23.8542 19.271 23.5464 19.271 23.1667C19.271 22.7871 18.9631 22.4792 18.5835 22.4792V23.8542ZM23.8543 15.8334C23.8543 15.4537 23.5465 15.1459 23.1668 15.1459C22.7871 15.1459 22.4793 15.4537 22.4793 15.8334H23.8543ZM22.4793 18.5834C22.4793 18.9631 22.7871 19.2709 23.1668 19.2709C23.5465 19.2709 23.8543 18.9631 23.8543 18.5834H22.4793ZM15.8335 11.9376H18.5835V10.5626H15.8335V11.9376ZM10.5626 15.8334V18.5834H11.9376V15.8334H10.5626ZM13.4161 10.5684C12.6686 10.6664 12.0306 10.862 11.5062 11.2934L12.3797 12.3552C12.6231 12.155 12.9712 12.0135 13.595 11.9317L13.4161 10.5684ZM11.9242 13.2188C12.0125 12.7791 12.1551 12.54 12.3797 12.3552L11.5062 11.2934C10.975 11.7304 10.7089 12.287 10.5761 12.948L11.9242 13.2188ZM23.8408 12.948C23.7081 12.287 23.442 11.7304 22.9108 11.2934L22.0372 12.3552C22.2618 12.54 22.4044 12.7791 22.4928 13.2188L23.8408 12.948ZM20.822 11.9317C21.4458 12.0135 21.7938 12.155 22.0372 12.3552L22.9108 11.2934C22.3863 10.862 21.7483 10.6664 21.0008 10.5684L20.822 11.9317ZM21.0008 23.8484C21.7483 23.7504 22.3863 23.5549 22.9108 23.1235L22.0372 22.0616C21.7938 22.2618 21.4458 22.4032 20.822 22.4851L21.0008 23.8484ZM22.4928 21.198C22.4044 21.6377 22.2618 21.8768 22.0372 22.0616L22.9108 23.1235C23.442 22.6865 23.7081 22.1298 23.8408 21.4688L22.4928 21.198ZM10.5761 21.4688C10.7089 22.1298 10.975 22.6865 11.5062 23.1235L12.3797 22.0616C12.1551 21.8768 12.0125 21.6377 11.9242 21.198L10.5761 21.4688ZM13.595 22.4851C12.9712 22.4032 12.6231 22.2618 12.3797 22.0616L11.5062 23.1235C12.0306 23.5549 12.6686 23.7504 13.4161 23.8484L13.595 22.4851ZM15.8335 23.8542H18.5835V22.4792H15.8335V23.8542ZM22.4793 15.8334V18.5834H23.8543V15.8334H22.4793Z" fill="#062046"/>
    <path d="M20.417 16.75L20.9792 17.2346C21.2155 17.4382 21.3337 17.5401 21.3337 17.6667C21.3337 17.7932 21.2155 17.8951 20.9792 18.0988L20.417 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M13.9997 16.75L13.4375 17.2346C13.2012 17.4382 13.083 17.5401 13.083 17.6667C13.083 17.7932 13.2012 17.8951 13.4375 18.0988L13.9997 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M18.583 15.8335L15.833 20.4168" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>

    </div>
`

editSpan.innerHTML=`<div class="ct-tooltip ct-mr-5" title="Open Image Editor" data-tooltip="Open Image Editor">
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg" class="ct-my-svg">
<rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
<rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
<path d="M22.8913 16.1083L21.9747 17.025L20.1413 15.1917L21.058 14.275C21.1497 14.1833 21.2413 14.0917 21.4247 14.0917C21.5163 14.0917 21.6997 14.1833 21.7913 14.275L22.983 15.4667C23.0747 15.65 23.0747 15.925 22.8913 16.1083ZM13.9997 21.2417V23.1667H15.9247L21.5163 17.575L19.683 15.7417L13.9997 21.2417ZM12.3588 17.5108L10.5622 15.3475L8.04134 18.5833H14.1097L16.438 16.3375L14.8797 14.2658L12.3588 17.5108ZM12.1663 21.2417V20.4625L12.2122 20.4167H7.35384C6.97414 20.4167 6.66634 20.1089 6.66634 19.7292V8.27083C6.66634 7.89114 6.97415 7.58333 7.35384 7.58333H18.8122C19.1919 7.58333 19.4997 7.89114 19.4997 8.27083V13.3675L21.333 11.5983V7.58333C21.333 7.0971 21.1399 6.63079 20.796 6.28697C20.4522 5.94315 19.9859 5.75 19.4997 5.75H6.66634C5.65801 5.75 4.83301 6.575 4.83301 7.58333V20.4167C4.83301 20.9029 5.02616 21.3692 5.36998 21.713C5.7138 22.0568 6.18011 22.25 6.66634 22.25H12.1663V21.2417Z" fill="#062046"/>
</svg>
</div>`

editSpan.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    chrome?.storage?.sync.get(['userData'],function(text){
        if (!text || !text.userData || !text.userData.apiUrl || !text.userData.token) {
            window.showMessage("Please logged in into curateit to access this feature!", "error")
            return 
        }

        const covers = []
        for (let i = 0; i < document.images.length; i++) {
            const img = document.images[i];
            covers.push(img.src)
        }
        const icon = document.querySelector('link[rel="icon"]')?.href || ""
        const payload = {
            title: document.title,
            description: document.querySelector('meta[name="description"]')?.content || "",
            type: "Image",
            author: text.userData.userId,
            url: (window.location.href && window.location.href.endsWith('/')) ? window.location.href?.slice(0, -1): window.location.href,
            tags: [],
            collections: text.userData.unfilteredCollectionId,
            is_favourite: false,
            notes: "",
            image: currentSrc,
            metaData: {
                covers: covers,
                docImages: Array.from(document?.images)?.map((img) => { return img.src }) || [],
                icon: icon !== "" ? { icon, type: "image" } : { type: "image", icon: currentSrc },
                defaultIcon: icon !== "" ? icon : null,
                defaultThumbnail: currentSrc
            },
            showThumbnail: true
        }

        fetch(`${text.userData.apiUrl}/api/ocre?image=${encodeURIComponent(currentSrc)}&imageColor=true`, {
            method: 'POST',
            headers: {
                'Content-type': 'application/json; charset=UTF-8',
                'Authorization': `Bearer ${text.userData.token}`
            },
            body: JSON.stringify(payload)
        })
        .then(res => res.json())
        .then(res => {
            if (res.id && text.userData.webappURL && text.userData.username) {
                window.open(`${text.userData.webappURL}/u/${text.userData.username}/image-editor/${res.id}/${text.userData.token}?url=${res.S3_link.length !== 0 ? res.S3_link[0] : currentSrc}`, "_blank")
            }
        })
        .catch((err) => {
            window.showMessage("Something went wrong while adding image!", "error")
        })
    })
})

msgSpan.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    window.panelToggle("?highlight-list", true)
    return false
})

copySpan.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    window.navigator.clipboard.writeText(currentSrc).then(() => window.showMessage('Image copied', "success"));
    return false
})

dwldSpan.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    fetch(currentSrc)
        .then(res => res.blob())
        .then(blob => {
            const url = URL.createObjectURL(blob);

            const link    = document.createElement('a');
            link.href     = url;
            link.download = currentSrc.split("/").pop();
            document.body.appendChild(link);
            link.click();
            // alert("Image downloaded")
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        })
        .catch(err => console.log(err))
    return false
})

textExtractSpan.addEventListener("click", (e) => {
    e.preventDefault()
    e.stopPropagation()
    e.stopImmediatePropagation()
    const payload= {
        base64: currentSrc
    }
    chrome?.storage?.sync.get(['userData'],function(text){
        if (!text || !text.userData || !text.userData.apiUrl || !text.userData.token) {
            window.showMessage("Please logged in into curateit to access this feature!", "error")
            textExtractSpan.innerHTML=`
                    <div class="ct-tooltip ct-mr-5" title="Copy and extract image text" data-tooltip="Copy and extract image text">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
                    <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
                    <path d="M18.5829 11.2502C18.5807 8.5395 18.5397 7.13544 17.7507 6.17406C17.5983 5.9884 17.4281 5.81816 17.2425 5.66579C16.2283 4.8335 14.7215 4.8335 11.708 4.8335C8.69448 4.8335 7.18772 4.8335 6.17357 5.66579C5.98791 5.81815 5.81767 5.9884 5.6653 6.17406C4.83301 7.18821 4.83301 8.69497 4.83301 11.7085C4.83301 14.722 4.83301 16.2288 5.6653 17.243C5.81766 17.4286 5.98791 17.5988 6.17357 17.7512C7.13495 18.5402 8.53901 18.5812 11.2497 18.5834" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M15.8335 10.5626C15.4538 10.5626 15.146 10.8704 15.146 11.2501C15.146 11.6298 15.4538 11.9376 15.8335 11.9376V10.5626ZM18.5835 11.9376C18.9631 11.9376 19.271 11.6298 19.271 11.2501C19.271 10.8704 18.9631 10.5626 18.5835 10.5626V11.9376ZM11.9376 15.8334C11.9376 15.4537 11.6298 15.1459 11.2501 15.1459C10.8704 15.1459 10.5626 15.4537 10.5626 15.8334H11.9376ZM10.5626 18.5834C10.5626 18.9631 10.8704 19.2709 11.2501 19.2709C11.6298 19.2709 11.9376 18.9631 11.9376 18.5834H10.5626ZM13.595 11.9317C13.9714 11.8824 14.2365 11.5372 14.1872 11.1607C14.1378 10.7842 13.7926 10.519 13.4161 10.5684L13.595 11.9317ZM10.5761 12.948C10.5013 13.3203 10.7425 13.6826 11.1147 13.7574C11.487 13.8322 11.8494 13.5911 11.9242 13.2188L10.5761 12.948ZM22.4928 13.2188C22.5676 13.5911 22.9299 13.8322 23.3022 13.7574C23.6744 13.6826 23.9156 13.3203 23.8408 12.948L22.4928 13.2188ZM21.0008 10.5684C20.6243 10.519 20.2791 10.7842 20.2297 11.1607C20.1804 11.5372 20.4455 11.8824 20.822 11.9317L21.0008 10.5684ZM20.822 22.4851C20.4455 22.5344 20.1804 22.8796 20.2297 23.2561C20.2791 23.6326 20.6243 23.8978 21.0008 23.8484L20.822 22.4851ZM23.8408 21.4688C23.9156 21.0965 23.6744 20.7342 23.3022 20.6594C22.9299 20.5846 22.5676 20.8258 22.4928 21.198L23.8408 21.4688ZM11.9242 21.198C11.8494 20.8258 11.487 20.5846 11.1147 20.6594C10.7425 20.7342 10.5013 21.0965 10.5761 21.4688L11.9242 21.198ZM13.4161 23.8484C13.7926 23.8978 14.1378 23.6326 14.1872 23.2561C14.2365 22.8796 13.9714 22.5344 13.595 22.4851L13.4161 23.8484ZM15.8335 22.4792C15.4538 22.4792 15.146 22.7871 15.146 23.1667C15.146 23.5464 15.4538 23.8542 15.8335 23.8542V22.4792ZM18.5835 23.8542C18.9631 23.8542 19.271 23.5464 19.271 23.1667C19.271 22.7871 18.9631 22.4792 18.5835 22.4792V23.8542ZM23.8543 15.8334C23.8543 15.4537 23.5465 15.1459 23.1668 15.1459C22.7871 15.1459 22.4793 15.4537 22.4793 15.8334H23.8543ZM22.4793 18.5834C22.4793 18.9631 22.7871 19.2709 23.1668 19.2709C23.5465 19.2709 23.8543 18.9631 23.8543 18.5834H22.4793ZM15.8335 11.9376H18.5835V10.5626H15.8335V11.9376ZM10.5626 15.8334V18.5834H11.9376V15.8334H10.5626ZM13.4161 10.5684C12.6686 10.6664 12.0306 10.862 11.5062 11.2934L12.3797 12.3552C12.6231 12.155 12.9712 12.0135 13.595 11.9317L13.4161 10.5684ZM11.9242 13.2188C12.0125 12.7791 12.1551 12.54 12.3797 12.3552L11.5062 11.2934C10.975 11.7304 10.7089 12.287 10.5761 12.948L11.9242 13.2188ZM23.8408 12.948C23.7081 12.287 23.442 11.7304 22.9108 11.2934L22.0372 12.3552C22.2618 12.54 22.4044 12.7791 22.4928 13.2188L23.8408 12.948ZM20.822 11.9317C21.4458 12.0135 21.7938 12.155 22.0372 12.3552L22.9108 11.2934C22.3863 10.862 21.7483 10.6664 21.0008 10.5684L20.822 11.9317ZM21.0008 23.8484C21.7483 23.7504 22.3863 23.5549 22.9108 23.1235L22.0372 22.0616C21.7938 22.2618 21.4458 22.4032 20.822 22.4851L21.0008 23.8484ZM22.4928 21.198C22.4044 21.6377 22.2618 21.8768 22.0372 22.0616L22.9108 23.1235C23.442 22.6865 23.7081 22.1298 23.8408 21.4688L22.4928 21.198ZM10.5761 21.4688C10.7089 22.1298 10.975 22.6865 11.5062 23.1235L12.3797 22.0616C12.1551 21.8768 12.0125 21.6377 11.9242 21.198L10.5761 21.4688ZM13.595 22.4851C12.9712 22.4032 12.6231 22.2618 12.3797 22.0616L11.5062 23.1235C12.0306 23.5549 12.6686 23.7504 13.4161 23.8484L13.595 22.4851ZM15.8335 23.8542H18.5835V22.4792H15.8335V23.8542ZM22.4793 15.8334V18.5834H23.8543V15.8334H22.4793Z" fill="#062046"/>
                    <path d="M20.417 16.75L20.9792 17.2346C21.2155 17.4382 21.3337 17.5401 21.3337 17.6667C21.3337 17.7932 21.2155 17.8951 20.9792 18.0988L20.417 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M13.9997 16.75L13.4375 17.2346C13.2012 17.4382 13.083 17.5401 13.083 17.6667C13.083 17.7932 13.2012 17.8951 13.4375 18.0988L13.9997 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M18.583 15.8335L15.833 20.4168" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                
                    </div>
                `
            textExtractSpan.setAttribute('title','Copy Text')
            return
        }
            textExtractSpan.innerHTML=`
            <div class="ct-tooltip" title="Loading" data-tooltip="Loading">
            <svg style="filter: brightness(0.5);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path fill="none" d="M0 0h24v24H0z"/><path d="M3.055 13H5.07a7.002 7.002 0 0 0 13.858 0h2.016a9.001 9.001 0 0 1-17.89 0zm0-2a9.001 9.001 0 0 1 17.89 0H18.93a7.002 7.002 0 0 0-13.858 0H3.055z"/></svg>
            </div>
            `
            textExtractSpan.setAttribute('title','Loading')
            textExtractSpan.setAttribute('data-tooltip','Loading')
            fetch(`${text.userData.apiUrl}/api/ocre?image=${encodeURIComponent(currentSrc)}&ocr=true`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${text.userData.token}`
                },
                body: JSON.stringify(payload)
            })
            .then(resp => {
                return resp.json()
            })
            .then(response => {  
                textExtractSpan.innerHTML=`
                <div class="ct-tooltip ct-mr-5" title="Copy and extract image text" data-tooltip="Copy and extract image text">
                <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
                <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
                <path d="M18.5829 11.2502C18.5807 8.5395 18.5397 7.13544 17.7507 6.17406C17.5983 5.9884 17.4281 5.81816 17.2425 5.66579C16.2283 4.8335 14.7215 4.8335 11.708 4.8335C8.69448 4.8335 7.18772 4.8335 6.17357 5.66579C5.98791 5.81815 5.81767 5.9884 5.6653 6.17406C4.83301 7.18821 4.83301 8.69497 4.83301 11.7085C4.83301 14.722 4.83301 16.2288 5.6653 17.243C5.81766 17.4286 5.98791 17.5988 6.17357 17.7512C7.13495 18.5402 8.53901 18.5812 11.2497 18.5834" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M15.8335 10.5626C15.4538 10.5626 15.146 10.8704 15.146 11.2501C15.146 11.6298 15.4538 11.9376 15.8335 11.9376V10.5626ZM18.5835 11.9376C18.9631 11.9376 19.271 11.6298 19.271 11.2501C19.271 10.8704 18.9631 10.5626 18.5835 10.5626V11.9376ZM11.9376 15.8334C11.9376 15.4537 11.6298 15.1459 11.2501 15.1459C10.8704 15.1459 10.5626 15.4537 10.5626 15.8334H11.9376ZM10.5626 18.5834C10.5626 18.9631 10.8704 19.2709 11.2501 19.2709C11.6298 19.2709 11.9376 18.9631 11.9376 18.5834H10.5626ZM13.595 11.9317C13.9714 11.8824 14.2365 11.5372 14.1872 11.1607C14.1378 10.7842 13.7926 10.519 13.4161 10.5684L13.595 11.9317ZM10.5761 12.948C10.5013 13.3203 10.7425 13.6826 11.1147 13.7574C11.487 13.8322 11.8494 13.5911 11.9242 13.2188L10.5761 12.948ZM22.4928 13.2188C22.5676 13.5911 22.9299 13.8322 23.3022 13.7574C23.6744 13.6826 23.9156 13.3203 23.8408 12.948L22.4928 13.2188ZM21.0008 10.5684C20.6243 10.519 20.2791 10.7842 20.2297 11.1607C20.1804 11.5372 20.4455 11.8824 20.822 11.9317L21.0008 10.5684ZM20.822 22.4851C20.4455 22.5344 20.1804 22.8796 20.2297 23.2561C20.2791 23.6326 20.6243 23.8978 21.0008 23.8484L20.822 22.4851ZM23.8408 21.4688C23.9156 21.0965 23.6744 20.7342 23.3022 20.6594C22.9299 20.5846 22.5676 20.8258 22.4928 21.198L23.8408 21.4688ZM11.9242 21.198C11.8494 20.8258 11.487 20.5846 11.1147 20.6594C10.7425 20.7342 10.5013 21.0965 10.5761 21.4688L11.9242 21.198ZM13.4161 23.8484C13.7926 23.8978 14.1378 23.6326 14.1872 23.2561C14.2365 22.8796 13.9714 22.5344 13.595 22.4851L13.4161 23.8484ZM15.8335 22.4792C15.4538 22.4792 15.146 22.7871 15.146 23.1667C15.146 23.5464 15.4538 23.8542 15.8335 23.8542V22.4792ZM18.5835 23.8542C18.9631 23.8542 19.271 23.5464 19.271 23.1667C19.271 22.7871 18.9631 22.4792 18.5835 22.4792V23.8542ZM23.8543 15.8334C23.8543 15.4537 23.5465 15.1459 23.1668 15.1459C22.7871 15.1459 22.4793 15.4537 22.4793 15.8334H23.8543ZM22.4793 18.5834C22.4793 18.9631 22.7871 19.2709 23.1668 19.2709C23.5465 19.2709 23.8543 18.9631 23.8543 18.5834H22.4793ZM15.8335 11.9376H18.5835V10.5626H15.8335V11.9376ZM10.5626 15.8334V18.5834H11.9376V15.8334H10.5626ZM13.4161 10.5684C12.6686 10.6664 12.0306 10.862 11.5062 11.2934L12.3797 12.3552C12.6231 12.155 12.9712 12.0135 13.595 11.9317L13.4161 10.5684ZM11.9242 13.2188C12.0125 12.7791 12.1551 12.54 12.3797 12.3552L11.5062 11.2934C10.975 11.7304 10.7089 12.287 10.5761 12.948L11.9242 13.2188ZM23.8408 12.948C23.7081 12.287 23.442 11.7304 22.9108 11.2934L22.0372 12.3552C22.2618 12.54 22.4044 12.7791 22.4928 13.2188L23.8408 12.948ZM20.822 11.9317C21.4458 12.0135 21.7938 12.155 22.0372 12.3552L22.9108 11.2934C22.3863 10.862 21.7483 10.6664 21.0008 10.5684L20.822 11.9317ZM21.0008 23.8484C21.7483 23.7504 22.3863 23.5549 22.9108 23.1235L22.0372 22.0616C21.7938 22.2618 21.4458 22.4032 20.822 22.4851L21.0008 23.8484ZM22.4928 21.198C22.4044 21.6377 22.2618 21.8768 22.0372 22.0616L22.9108 23.1235C23.442 22.6865 23.7081 22.1298 23.8408 21.4688L22.4928 21.198ZM10.5761 21.4688C10.7089 22.1298 10.975 22.6865 11.5062 23.1235L12.3797 22.0616C12.1551 21.8768 12.0125 21.6377 11.9242 21.198L10.5761 21.4688ZM13.595 22.4851C12.9712 22.4032 12.6231 22.2618 12.3797 22.0616L11.5062 23.1235C12.0306 23.5549 12.6686 23.7504 13.4161 23.8484L13.595 22.4851ZM15.8335 23.8542H18.5835V22.4792H15.8335V23.8542ZM22.4793 15.8334V18.5834H23.8543V15.8334H22.4793Z" fill="#062046"/>
                <path d="M20.417 16.75L20.9792 17.2346C21.2155 17.4382 21.3337 17.5401 21.3337 17.6667C21.3337 17.7932 21.2155 17.8951 20.9792 18.0988L20.417 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M13.9997 16.75L13.4375 17.2346C13.2012 17.4382 13.083 17.5401 13.083 17.6667C13.083 17.7932 13.2012 17.8951 13.4375 18.0988L13.9997 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M18.583 15.8335L15.833 20.4168" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>

                </div>
                `
                textExtractSpan.setAttribute('title','Copy Text')
                textExtractSpan.setAttribute('data-tooltip','Copy Text')
                if(response && response.text){
                    window.navigator.clipboard.writeText(response.text)
                    window.showMessage('Text Extracted and copied to clipboard\n\n' 
                            + "\t Extracted Text is below:\n" 
                            + `${response.text}\n\n`, "success" 
                        )
                }
            })
            .catch(error => {
                textExtractSpan.innerHTML=`
                <div class="ct-tooltip ct-mr-5" title="Copy and extract image text" data-tooltip="Copy and extract image text">
                <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" fill="#EBEFF4"/>
                <rect x="0.25" y="0.25" width="27.5" height="27.5" rx="3.75" stroke="#062046" stroke-width="0.5"/>
                <path d="M18.5829 11.2502C18.5807 8.5395 18.5397 7.13544 17.7507 6.17406C17.5983 5.9884 17.4281 5.81816 17.2425 5.66579C16.2283 4.8335 14.7215 4.8335 11.708 4.8335C8.69448 4.8335 7.18772 4.8335 6.17357 5.66579C5.98791 5.81815 5.81767 5.9884 5.6653 6.17406C4.83301 7.18821 4.83301 8.69497 4.83301 11.7085C4.83301 14.722 4.83301 16.2288 5.6653 17.243C5.81766 17.4286 5.98791 17.5988 6.17357 17.7512C7.13495 18.5402 8.53901 18.5812 11.2497 18.5834" stroke="#062046" stroke-width="1.7" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M15.8335 10.5626C15.4538 10.5626 15.146 10.8704 15.146 11.2501C15.146 11.6298 15.4538 11.9376 15.8335 11.9376V10.5626ZM18.5835 11.9376C18.9631 11.9376 19.271 11.6298 19.271 11.2501C19.271 10.8704 18.9631 10.5626 18.5835 10.5626V11.9376ZM11.9376 15.8334C11.9376 15.4537 11.6298 15.1459 11.2501 15.1459C10.8704 15.1459 10.5626 15.4537 10.5626 15.8334H11.9376ZM10.5626 18.5834C10.5626 18.9631 10.8704 19.2709 11.2501 19.2709C11.6298 19.2709 11.9376 18.9631 11.9376 18.5834H10.5626ZM13.595 11.9317C13.9714 11.8824 14.2365 11.5372 14.1872 11.1607C14.1378 10.7842 13.7926 10.519 13.4161 10.5684L13.595 11.9317ZM10.5761 12.948C10.5013 13.3203 10.7425 13.6826 11.1147 13.7574C11.487 13.8322 11.8494 13.5911 11.9242 13.2188L10.5761 12.948ZM22.4928 13.2188C22.5676 13.5911 22.9299 13.8322 23.3022 13.7574C23.6744 13.6826 23.9156 13.3203 23.8408 12.948L22.4928 13.2188ZM21.0008 10.5684C20.6243 10.519 20.2791 10.7842 20.2297 11.1607C20.1804 11.5372 20.4455 11.8824 20.822 11.9317L21.0008 10.5684ZM20.822 22.4851C20.4455 22.5344 20.1804 22.8796 20.2297 23.2561C20.2791 23.6326 20.6243 23.8978 21.0008 23.8484L20.822 22.4851ZM23.8408 21.4688C23.9156 21.0965 23.6744 20.7342 23.3022 20.6594C22.9299 20.5846 22.5676 20.8258 22.4928 21.198L23.8408 21.4688ZM11.9242 21.198C11.8494 20.8258 11.487 20.5846 11.1147 20.6594C10.7425 20.7342 10.5013 21.0965 10.5761 21.4688L11.9242 21.198ZM13.4161 23.8484C13.7926 23.8978 14.1378 23.6326 14.1872 23.2561C14.2365 22.8796 13.9714 22.5344 13.595 22.4851L13.4161 23.8484ZM15.8335 22.4792C15.4538 22.4792 15.146 22.7871 15.146 23.1667C15.146 23.5464 15.4538 23.8542 15.8335 23.8542V22.4792ZM18.5835 23.8542C18.9631 23.8542 19.271 23.5464 19.271 23.1667C19.271 22.7871 18.9631 22.4792 18.5835 22.4792V23.8542ZM23.8543 15.8334C23.8543 15.4537 23.5465 15.1459 23.1668 15.1459C22.7871 15.1459 22.4793 15.4537 22.4793 15.8334H23.8543ZM22.4793 18.5834C22.4793 18.9631 22.7871 19.2709 23.1668 19.2709C23.5465 19.2709 23.8543 18.9631 23.8543 18.5834H22.4793ZM15.8335 11.9376H18.5835V10.5626H15.8335V11.9376ZM10.5626 15.8334V18.5834H11.9376V15.8334H10.5626ZM13.4161 10.5684C12.6686 10.6664 12.0306 10.862 11.5062 11.2934L12.3797 12.3552C12.6231 12.155 12.9712 12.0135 13.595 11.9317L13.4161 10.5684ZM11.9242 13.2188C12.0125 12.7791 12.1551 12.54 12.3797 12.3552L11.5062 11.2934C10.975 11.7304 10.7089 12.287 10.5761 12.948L11.9242 13.2188ZM23.8408 12.948C23.7081 12.287 23.442 11.7304 22.9108 11.2934L22.0372 12.3552C22.2618 12.54 22.4044 12.7791 22.4928 13.2188L23.8408 12.948ZM20.822 11.9317C21.4458 12.0135 21.7938 12.155 22.0372 12.3552L22.9108 11.2934C22.3863 10.862 21.7483 10.6664 21.0008 10.5684L20.822 11.9317ZM21.0008 23.8484C21.7483 23.7504 22.3863 23.5549 22.9108 23.1235L22.0372 22.0616C21.7938 22.2618 21.4458 22.4032 20.822 22.4851L21.0008 23.8484ZM22.4928 21.198C22.4044 21.6377 22.2618 21.8768 22.0372 22.0616L22.9108 23.1235C23.442 22.6865 23.7081 22.1298 23.8408 21.4688L22.4928 21.198ZM10.5761 21.4688C10.7089 22.1298 10.975 22.6865 11.5062 23.1235L12.3797 22.0616C12.1551 21.8768 12.0125 21.6377 11.9242 21.198L10.5761 21.4688ZM13.595 22.4851C12.9712 22.4032 12.6231 22.2618 12.3797 22.0616L11.5062 23.1235C12.0306 23.5549 12.6686 23.7504 13.4161 23.8484L13.595 22.4851ZM15.8335 23.8542H18.5835V22.4792H15.8335V23.8542ZM22.4793 15.8334V18.5834H23.8543V15.8334H22.4793Z" fill="#062046"/>
                <path d="M20.417 16.75L20.9792 17.2346C21.2155 17.4382 21.3337 17.5401 21.3337 17.6667C21.3337 17.7932 21.2155 17.8951 20.9792 18.0988L20.417 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M13.9997 16.75L13.4375 17.2346C13.2012 17.4382 13.083 17.5401 13.083 17.6667C13.083 17.7932 13.2012 17.8951 13.4375 18.0988L13.9997 18.5833" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M18.583 15.8335L15.833 20.4168" stroke="#062046" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>

                </div>
                `
                textExtractSpan.setAttribute('title','Copy Text')
                textExtractSpan.setAttribute('data-tooltip','Copy Text')
                window.showMessage("No text found in image", "error")
                console.log(error);
            });

    })

    return false
})

const setupElements = () => {
    if (currentSrc !== "" && currentSrc !== null && !window.location.href.includes("curateit")) {
        optionContainer.append(editSpan, copySpan, dwldSpan, textExtractSpan)
        divElm.append(iconSvg, optionContainer)        
        document.body.append(divElm)
    }
}

const getImageSource = (e) => {
    return new Promise((resolve, reject) => {
        const { src, srcset } = e.target
        const url             = src || srcset
        isProcessing          = true
        if (url.startsWith("data:image") || url.startsWith("data:image")) {
            const payload= {
                base64: url
            }
            chrome?.storage?.sync.get(['userData'],function(text){
                if (!text || !text.userData || !text.userData.apiUrl || !text.userData.token) {
                    resolve("User not logged in")
                    return
                }
                    
                fetch(`${text?.userData?.apiUrl}/api/upload-base64-img`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${text?.userData?.token}`
                    },
                    body: JSON.stringify(payload)
                })
                .then(resp => {
                    return resp.json()
                })
                .then(response => {
                    isProcessing = false
                    resolve(response.message)
                    return
                })
                .catch(error => {
                    isProcessing = false
                    resolve("Error while uploading image")
                    return
                });
        
            })
        }
        else {
            isProcessing = false
            resolve(url)
        }
    })
}

const updateIconsOnImages = () => {
    const images = document.getElementsByTagName('img')
    const onImageHover = async (e) => {
        if (e.target.width > 100 && e.target.height > 100) {
            currentSrc = e.target.getAttribute("data-current-src")
            if (currentSrc === null && !isProcessing) {
                currentSrc                = await getImageSource(e)
                if (currentSrc !== null) {
                    e.target.setAttribute("data-current-src", currentSrc)
                }
            }
            iconSvg.style.display         = "block"
            iconSvg.style.top             = `${(e.pageY - e.offsetY) + 10}px`
            iconSvg.style.left            = `${(e.pageX - e.offsetX) + 10}px`

            const iconBB                  = iconSvg.getBoundingClientRect()
            const optContainerLeft        = iconBB.left && iconBB.width ? iconBB.left + iconBB.width + 10 : ((e.pageX - e.offsetX) + 83)

            optionContainer.style.display = "flex"
            optionContainer.style.top     = `${(e.pageY - e.offsetY) + 13}px`
            optionContainer.style.left    = `${optContainerLeft}px`

            divElm.style.display          = "flex"
            // iconSvg.setAttribute("data-current-src", e.target.src)
        }
    }

    const onImageLeave = (e) => {
        // const ctImage = document.getElementById("ct-image-operations")
        // ctImage.style.display = "none"
        iconSvg.style.display           = "none"
        optionContainer.style.display   = "none"
        divElm.style.display            = "none"
    }

    for (let i=0; i < images.length; i++) { 
        if(getShowImageOptions() === "SHOW"){
            const image = images[i]
            image.addEventListener("pointerenter", onImageHover)
            image.addEventListener("pointerout", onImageLeave)
        }else{
            break;
        }
    }
}

const checkElementExists    = () => {
    const iconSvgArr           = document.getElementsByClassName('imageSave-button')
    const optionContainerArr   = document.getElementsByClassName("ct-option-container")

    if (iconSvgArr.length === 0 && optionContainerArr.length === 0 && getShowImageOptions() === "SHOW") {
        setupElements()
    }
}   

window.addEventListener("animationend", (e) => {
    checkElementExists()
    updateIconsOnImages()
    window.fetchAndCreateCodeButton()
})

window.addEventListener("transitionend", (e) => {
    checkElementExists()
    updateIconsOnImages()
    window.fetchAndCreateCodeButton()
})

window.addEventListener("DOMContentLoaded", (e) => {
    checkElementExists()
    updateIconsOnImages()
    window.fetchAndCreateCodeButton()
})

window.addEventListener("scroll", (e) => {
    checkElementExists()
    updateIconsOnImages()
    window.fetchAndCreateCodeButton()
})

window.setupImageElements = setupElements
window.showSaveImageIcon = setupElements;